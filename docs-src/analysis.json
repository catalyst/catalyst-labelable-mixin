{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "`<catalyst-labelable-mixin>` is a mixin function that retruns a class that\nextends the given super class. The returned class will be the same as the\nsuper class except it will also have labelable functionality.\n\n*Note: If the element this mixin is applied to does not have an id, this\nmixin will essentially do nothing.*\n\n### Labelable functionality\n\nEssentially all this means is that the `aria-labelledby` attribute of the\nelement is configured automatically based on the label tags' `for` attribute.\n\n### Example\n\n```js\nimport { catalystLabelableMixin } from '@catalyst-elements/catalyst-labelable-mixin';\n\nexport class MyElement extends catalystLabelableMixin(HTMLElement) {\n  static get is() {\n    return 'my-element';\n  }\n\n  // ...\n}\n```\n\n```html\n<label for=\"foo\">This is my element:</label>\n<my-element id=\"foo\"></my-element>\n```",
      "summary": "",
      "path": "@catalyst-elements/catalyst-labelable-mixin/catalyst-labelable-mixin.mjs",
      "properties": [
        {
          "name": "[catalystLabelableMixin.id]",
          "type": "true",
          "description": "States that this mixin has been applied to the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {}
        },
        {
          "name": "labels",
          "type": "Array<HTMLElement>",
          "description": "The labels attached to this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 8
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "_connectLabels",
          "description": "Ensure the labels for this element are connected to it correctly.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_disconnectLabels",
          "description": "Disconnect all of this element's labels from it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_generateNewLabelId",
          "description": "Generate a new unique id for a label element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 151,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Labelable",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
