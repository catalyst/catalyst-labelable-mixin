{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "`<catalyst-labelable-mixin>` is a mixin function that retruns a class that\nextends the given super class. The returned class will be the same as the\nsuper class except it will also have labelable functionality.\n\n*Note: If the element this mixin is applied to does not have an id, this\nmixin will essentially do nothing.*\n\n### Labelable functionality\n\nEssentially all this means is that the `aria-labelledby` attribute of the\nelement is configured automatically based on the label tags' `for` attribute.\n\n*Note: Labels must either use the tag `<label>` or have the attribute\n`role=\"label\"`.*\n\n### Example\n\n```js\nimport { catalystLabelableMixin } from '@catalyst-elements/catalyst-labelable-mixin';\n\nexport class MyElement extends catalystLabelableMixin(HTMLElement) {\n  static get is() {\n    return 'my-element';\n  }\n\n  // ...\n}\n```\n\n```html\n<label for=\"foo\">This is my element:</label>\n<my-element id=\"foo\"></my-element>\n```\n\n### Extra Notes\n\n#### `instanceof` can be used to test if a given element has this mixin applied.\n\nUsing the example above:\n\n```js\nMyElement instanceof catalystLabelableMixin // === true\n```",
      "summary": "Makes an element labelable.",
      "path": "@catalyst-elements/catalyst-labelable-mixin/catalyst-labelable-mixin.mjs",
      "properties": [
        {
          "name": "labels",
          "type": "Array<HTMLElement>",
          "description": "The labels that are currently attached to this element.\n     ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 5
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "updateLabels",
          "description": "Update the list of labels that are for this element.\n\nNote: There is no need to call this method before accessing the `labels`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getLabels",
          "description": "Update the list of labels that are for this element.\n\nNote: There is no need to call this method before accessing the `labels`\nproperty.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array<HTMLElement>"
          }
        },
        {
          "name": "_disconnectLabels",
          "description": "Disconnect all of this element's labels from it.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getLabelsGetTags",
          "description": "Get the label tags for this element.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAriaLablledby",
          "description": "Update the aria-labelledby attribute.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "labels",
              "type": "Array<HTMLElement>"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_generateNewLabelId",
          "description": "Generate a new unique id for a label element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Labelable",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
